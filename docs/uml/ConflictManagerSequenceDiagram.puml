@startuml

!include SequenceStyle.puml

box Command COMMAND_BOX_COLOR
participant ":AddLinkCommand" as AddLinkCommand COMMAND_COLOR
endbox

box Content CONTENT_BOX_COLOR
participant ":ConflictManager" as ConflictManager CONTENT_COLOR
participant ":ContentManager" as ContentManager CONTENT_COLOR
endbox

box Module MODULE_BOX_COLOR
participant ":ModuleManager" as ModuleManager MODULE_COLOR
participant ":NusModule" as NusModule MODULE_COLOR
endbox


Activate AddLinkCommand
create ConflictManager
AddLinkCommand -> ConflictManager: ConflictManager()
Activate ConflictManager

ConflictManager -> ConflictManager: getConflictingSchedule()
Activate ConflictManager

ConflictManager -> ConflictManager: getAllLinks()
Activate ConflictManager

ConflictManager -> ModuleManager: getAllModules()
Activate ModuleManager
NusModule --> ModuleManager: modules
Activate NusModule

loop For each NusModule in modules
    ModuleManager -> NusModule: getModule(NusModule)
    Deactivate ModuleManager
    NusModule -> ContentManager : getContentManager()
    Activate ContentManager
    Deactivate NusModule
    ContentManager -> ContentManager: getContents()
    Activate ContentManager
    ContentManager --> ContentManager: contents
    Deactivate ContentManager
    ContentManager --> ConflictManager: addAll(contents)
    Deactivate ContentManager
    ConflictManager --> ConflictManager: AllLinks
    Deactivate ConflictManager

    loop For each Link in AllLinks
        opt same day && overlapping start-time to end-time
        ConflictManager -> ConflictManager: append(LinkDescription)
        ConflictManager --> ConflictManager: conflictingSchedule
        Deactivate ConflictManager
    end
end


end

ConflictManager --> AddLinkCommand: conflictingSchedule
destroy ConflictManager
@enduml